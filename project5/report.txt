OBSTACLES FACED
-----------------------------------------------------------
A major obstacle faced was to accomodate for identical words in the same rule.

The complexity of my program is very bad, since it runs through the entire document again for each rule, but I was unable to find a good solution. However it takes time, my implementation works.

Another major obstacle was to accomodate for composite words, ie. words like "super-terrified" and "it's" which contain a non alpha character in between.


DESCRIPTION
----------------------------------------------------------
NORMALIZE RULES
The basic approach was to have a completely different empty set of rules which I would keep filling in as I run through the given array of rules and judge their correctness.

run through original array of rules
	if distance is negative, go to next rule
	if a non alpha character is found in any word, go to next rule
	check if a matching rule exists in the temporary set of checked rules
		if it does, then set distance to the minimum value out of the 2 rules
		else copy this rule to temporary set of rules and increase the counter of rules copied

copy the entire temporary set of rules to original set of rules and change number of rules to the number of rules copied

return number of rules copied


CALCULATE SATISFACTION
I ran through the entire document separately for each rule. Here, I would keep a temporary word, and would keep adding alphabets to the word until I came across a whitespace. Then I would try to match the word with the current words of the current rule while also keeping track of the distance.

run through all rules
	go through entire document
		keep adding to temporary word
		once temporary word is complete, check it against rule words and increase distance
			if match is found within the distance, keep track that match was found, set distance 0

			if match was found previously as well, and it was favourable (ie. previous match was with word 1 and now match is with word 2 or vice versa), increase satisfied rules counter, and move onto next rule.

			clear temporary word
	
return counter of satisfied rules


TEST DATA
-----------------------------------------------------------
(Even though I'm aware arrays of strings cannot be passed the way I mention in the test data, I've still done so just to increase comprehension)

normalizerules({"mad", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4)
calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4, The mad scientist unleashed a deranged evil giant robot")	//testing general functionality

normalizerules({"hello", "nothing"}, {"time", "toasf"}, {-12, 4}, 2)  //checking negative distance rules

normalizerules({"hello", "nothing", "done"}, {"done", "plol", "hello"}, {1, 4, 10}, 3) //checking for matching rules

normalizerules({"h14asf", "adgadg-", "lolas"}, {"perfect", "work", "good"}, {1, 2, 3}, 3) //checking for non alpha rule words


calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4, "The mad scientist unleashed a        deranged evil giant robot")	//testing what happens with multiple whitespaces


calculatesatisfaction({"m", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4, "The mad scientist unleashed a deranged evil giant robot")	//testing what happens if rule word is a single letter, and that letter is present in a word near the other rule word within the required distance


calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {0, 4, 1, 13}, 4, "The mad scientist unleashed a deranged evil giant robot")	//testing what happens when distance of a rule is 0


calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"mad", "robot", "plot", "mad"}, {0, 4, 1, 13}, 4, "The mad scientist unleashed a deranged evil giant robot")	//testing when distance is 0 but word is identical


calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4, "The mad insane's scientist unleashed a deranged evil giant robot")	//testing what happens when a compound word exists between two valid rule words. If the compound word is mistakenly considered two separate words, first rule wouldn't be satisfied


calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"scientist", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4, The Mad scientist unleashed a deranged evil giant robot")	//testing what happens with case variation


calculatesatisfaction({"mad", "deranged", "nefarious", "have"}, {"mad", "robot", "plot", "mad"}, {2, 4, 1, 13}, 4, The Mad scientist mad a deranged evil giant robot") //testing what happens when rule with identical words is supposed to be satisfied
